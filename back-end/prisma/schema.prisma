// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id                   Int                 @id @default(autoincrement())
  cnpj                 String              @unique
  name                 String
  email                String              @unique
  neighborhood         String
  street               String
  number               String
  cep                  String
  phoneNumber          String
  createdAt            DateTime            @default(now())
  classesNames         ClassName[]
  schoolsPrincipals    SchoolPrincipal[]
  classesNamesTeachers ClasseNameTeacher[]
  studentsSchools      StudentSchool[]
  yearsDivisions       YearDivision[]

  @@map("schools")
}

model ClassName {
  id                   Int                 @id @default(autoincrement())
  name                 String
  school               School              @relation(fields: [schoolId], references: [id])
  schoolId             Int
  isActive             Boolean             @default(true)
  createdAt            DateTime            @default(now())
  classesNamesTeachers ClasseNameTeacher[]

  @@map("classesNames")
}

model Principal {
  id           Int      @id @default(autoincrement())
  name         String
  cpf          String   @unique
  email        String   @unique
  placeOfBirth String
  neighborhood String
  street       String
  number       String
  cep          String
  phoneNumber  String
  createdAt    DateTime @default(now())

  @@map("principals")
}

model SchoolPrincipal {
  id        Int      @id @default(autoincrement())
  startDate String
  endDate   String
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  Int
  createdAt DateTime @default(now())

  @@map("schoolsPrincipals")
}

model Teacher {
  id                   Int                 @id @default(autoincrement())
  name                 String
  cpf                  String              @unique
  email                String              @unique
  placeOfBirth         String
  neighborhood         String
  street               String
  number               String
  cep                  String
  phoneNumber          String
  createdAt            DateTime            @default(now())
  classesNamesTeachers ClasseNameTeacher[]
  attendances          Attendance[]
  teachersSubjects     TeacherSubject[]

  @@map("teachers")
}

model Term {
  id                   Int                 @id @default(autoincrement())
  description          String
  createdAt            DateTime            @default(now())
  classesNamesTeachers ClasseNameTeacher[]
  studentsSchools      StudentSchool[]
  attendences          Attendance[]

  @@map("terms")
}

model ClasseNameTeacher {
  id               Int            @id @default(autoincrement())
  startDate        String
  endDate          String
  className        ClassName      @relation(fields: [classNameId], references: [id])
  classNameId      Int
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  teacherId        Int
  term             Term           @relation(fields: [termId], references: [id])
  termId           Int
  school           School         @relation(fields: [schoolId], references: [id])
  schoolId         Int
  teacherSubject   TeacherSubject @relation(fields: [teacherSubjectId], references: [id])
  teacherSubjectId Int
  createdAt        DateTime       @default(now())

  @@map("classesNamesTeachers")
}

model Subject {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  teachersSubjects TeacherSubject[]

  @@map("subjects")
}

model TeacherSubject {
  id                   Int                 @id @default(autoincrement())
  teacher              Teacher             @relation(fields: [teacherId], references: [id])
  teacherId            Int
  subject              Subject             @relation(fields: [subjectId], references: [id])
  subjectId            Int
  classesNamesTeachers ClasseNameTeacher[]

  @@map("teachersSubjects")
}

model Student {
  id                  Int                 @id @default(autoincrement())
  name                String
  cpf                 String              @unique
  birthDate           String
  placeOfBirth        String
  email               String              @unique
  motherName          String
  fatherName          String
  neighborhood        String
  street              String
  number              String
  cep                 String
  phoneNumber         String
  createdAt           DateTime            @default(now())
  studentsSchools     StudentSchool[]
  studentsActivities  StudentActivity[]
  studentsTests       StudentTest[]
  studentsAssignments StudentAssignment[]
  attendances         Attendance[]

  @@map("students")
}

model StudentSchool {
  id        Int      @id @default(autoincrement())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  term      Term     @relation(fields: [termId], references: [id])
  termId    Int
  createdAt DateTime @default(now())

  @@map("studentSchools")
}

model Activity {
  id                 Int                @id @default(autoincrement())
  description        String
  totalDistributed   Float
  createdAt          DateTime           @default(now())
  studentsActivities StudentActivity[]
  distributedScores  DistributedScore[]

  @@map("activities")
}

model StudentActivity {
  id         Int      @id @default(autoincrement())
  date       String
  score      Float
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  Int
  createdAt  DateTime @default(now())

  @@map("activitiesStudent")
}

model Test {
  id                Int                @id @default(autoincrement())
  description       String
  totalDistributed  Float
  createdAt         DateTime           @default(now())
  studentsTests     StudentTest[]
  distributedScores DistributedScore[]

  @@map("tests")
}

model StudentTest {
  id        Int      @id @default(autoincrement())
  date      String
  score     Float
  test      Test     @relation(fields: [testId], references: [id])
  testId    Int
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  createdAt DateTime @default(now())

  @@map("testsStudent")
}

model Assignment {
  id                  Int                 @id @default(autoincrement())
  description         String
  totalDistributed    Float
  createdAt           DateTime            @default(now())
  studentsAssignments StudentAssignment[]
  distributedScores   DistributedScore[]

  @@map("assignments")
}

model StudentAssignment {
  id           Int        @id @default(autoincrement())
  date         String
  score        Float
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    Int
  createdAt    DateTime   @default(now())

  @@map("studentAssignments")
}

model DistributedScore {
  id             Int          @id @default(autoincrement())
  date           String
  score          Float
  activity       Activity     @relation(fields: [activityId], references: [id])
  activityId     Int
  test           Test         @relation(fields: [testId], references: [id])
  testId         Int
  assignment     Assignment   @relation(fields: [assignmentId], references: [id])
  assignmentId   Int
  yearDivision   YearDivision @relation(fields: [yearDivisionId], references: [id])
  yearDivisionId Int
  createdAt      DateTime     @default(now())

  @@map("distributedScores")
}

enum divisionTypes {
  bimester
  trimester
  semester
}

model YearDivision {
  id                Int                @id @default(autoincrement())
  type              divisionTypes
  school            School             @relation(fields: [schoolId], references: [id])
  schoolId          Int
  createdAt         DateTime           @default(now())
  distributedScores DistributedScore[]

  @@map("yearDivisions")
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  isPresent Boolean
  student   Student  @relation(fields: [studentId], references: [id])
  studentId Int
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId Int
  term      Term     @relation(fields: [termId], references: [id])
  termId    Int
  createdAt DateTime @default(now())

  @@map("attendances")
}
